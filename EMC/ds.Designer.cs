//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RP2 {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ds")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ds : global::System.Data.DataSet {
        
        private razdelDataTable tablerazdel;
        
        private temaDataTable tabletema;
        
        private sodDataTable tablesod;
        
        private vidDataTable tablevid;
        
        private global::System.Data.DataRelation relationFK_razdel_tema;
        
        private global::System.Data.DataRelation relationFK_tip_sod;
        
        private global::System.Data.DataRelation relationFK_tema_sod;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ds() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ds(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["razdel"] != null)) {
                    base.Tables.Add(new razdelDataTable(ds.Tables["razdel"]));
                }
                if ((ds.Tables["tema"] != null)) {
                    base.Tables.Add(new temaDataTable(ds.Tables["tema"]));
                }
                if ((ds.Tables["sod"] != null)) {
                    base.Tables.Add(new sodDataTable(ds.Tables["sod"]));
                }
                if ((ds.Tables["vid"] != null)) {
                    base.Tables.Add(new vidDataTable(ds.Tables["vid"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public razdelDataTable razdel {
            get {
                return this.tablerazdel;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public temaDataTable tema {
            get {
                return this.tabletema;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sodDataTable sod {
            get {
                return this.tablesod;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public vidDataTable vid {
            get {
                return this.tablevid;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ds cln = ((ds)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["razdel"] != null)) {
                    base.Tables.Add(new razdelDataTable(ds.Tables["razdel"]));
                }
                if ((ds.Tables["tema"] != null)) {
                    base.Tables.Add(new temaDataTable(ds.Tables["tema"]));
                }
                if ((ds.Tables["sod"] != null)) {
                    base.Tables.Add(new sodDataTable(ds.Tables["sod"]));
                }
                if ((ds.Tables["vid"] != null)) {
                    base.Tables.Add(new vidDataTable(ds.Tables["vid"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablerazdel = ((razdelDataTable)(base.Tables["razdel"]));
            if ((initTable == true)) {
                if ((this.tablerazdel != null)) {
                    this.tablerazdel.InitVars();
                }
            }
            this.tabletema = ((temaDataTable)(base.Tables["tema"]));
            if ((initTable == true)) {
                if ((this.tabletema != null)) {
                    this.tabletema.InitVars();
                }
            }
            this.tablesod = ((sodDataTable)(base.Tables["sod"]));
            if ((initTable == true)) {
                if ((this.tablesod != null)) {
                    this.tablesod.InitVars();
                }
            }
            this.tablevid = ((vidDataTable)(base.Tables["vid"]));
            if ((initTable == true)) {
                if ((this.tablevid != null)) {
                    this.tablevid.InitVars();
                }
            }
            this.relationFK_razdel_tema = this.Relations["FK_razdel_tema"];
            this.relationFK_tip_sod = this.Relations["FK_tip_sod"];
            this.relationFK_tema_sod = this.Relations["FK_tema_sod"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ds";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ds.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablerazdel = new razdelDataTable();
            base.Tables.Add(this.tablerazdel);
            this.tabletema = new temaDataTable();
            base.Tables.Add(this.tabletema);
            this.tablesod = new sodDataTable();
            base.Tables.Add(this.tablesod);
            this.tablevid = new vidDataTable();
            base.Tables.Add(this.tablevid);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_razdel_tema", new global::System.Data.DataColumn[] {
                        this.tablerazdel.idRColumn}, new global::System.Data.DataColumn[] {
                        this.tabletema.idRColumn});
            this.tabletema.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_tip_sod", new global::System.Data.DataColumn[] {
                        this.tablevid.idVColumn}, new global::System.Data.DataColumn[] {
                        this.tablesod.idVColumn});
            this.tablesod.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_tema_sod", new global::System.Data.DataColumn[] {
                        this.tabletema.idTColumn,
                        this.tabletema.idRColumn}, new global::System.Data.DataColumn[] {
                        this.tablesod.idTColumn,
                        this.tablesod.idRColumn});
            this.tablesod.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFK_razdel_tema = new global::System.Data.DataRelation("FK_razdel_tema", new global::System.Data.DataColumn[] {
                        this.tablerazdel.idRColumn}, new global::System.Data.DataColumn[] {
                        this.tabletema.idRColumn}, false);
            this.Relations.Add(this.relationFK_razdel_tema);
            this.relationFK_tip_sod = new global::System.Data.DataRelation("FK_tip_sod", new global::System.Data.DataColumn[] {
                        this.tablevid.idVColumn}, new global::System.Data.DataColumn[] {
                        this.tablesod.idVColumn}, false);
            this.Relations.Add(this.relationFK_tip_sod);
            this.relationFK_tema_sod = new global::System.Data.DataRelation("FK_tema_sod", new global::System.Data.DataColumn[] {
                        this.tabletema.idTColumn,
                        this.tabletema.idRColumn}, new global::System.Data.DataColumn[] {
                        this.tablesod.idTColumn,
                        this.tablesod.idRColumn}, false);
            this.Relations.Add(this.relationFK_tema_sod);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerazdel() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetema() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesod() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializevid() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ds ds = new ds();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void razdelRowChangeEventHandler(object sender, razdelRowChangeEvent e);
        
        public delegate void temaRowChangeEventHandler(object sender, temaRowChangeEvent e);
        
        public delegate void sodRowChangeEventHandler(object sender, sodRowChangeEvent e);
        
        public delegate void vidRowChangeEventHandler(object sender, vidRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class razdelDataTable : global::System.Data.TypedTableBase<razdelRow> {
            
            private global::System.Data.DataColumn columnidR;
            
            private global::System.Data.DataColumn columntext;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public razdelDataTable() {
                this.TableName = "razdel";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal razdelDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected razdelDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idRColumn {
                get {
                    return this.columnidR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn textColumn {
                get {
                    return this.columntext;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public razdelRow this[int index] {
                get {
                    return ((razdelRow)(this.Rows[index]));
                }
            }
            
            public event razdelRowChangeEventHandler razdelRowChanging;
            
            public event razdelRowChangeEventHandler razdelRowChanged;
            
            public event razdelRowChangeEventHandler razdelRowDeleting;
            
            public event razdelRowChangeEventHandler razdelRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrazdelRow(razdelRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public razdelRow AddrazdelRow(int idR, string text) {
                razdelRow rowrazdelRow = ((razdelRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        idR,
                        text};
                rowrazdelRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrazdelRow);
                return rowrazdelRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public razdelRow FindByidR(int idR) {
                return ((razdelRow)(this.Rows.Find(new object[] {
                            idR})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                razdelDataTable cln = ((razdelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new razdelDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidR = base.Columns["idR"];
                this.columntext = base.Columns["text"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidR = new global::System.Data.DataColumn("idR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidR);
                this.columntext = new global::System.Data.DataColumn("text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntext);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("pkr", new global::System.Data.DataColumn[] {
                                this.columnidR}, true));
                this.columnidR.AllowDBNull = false;
                this.columnidR.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public razdelRow NewrazdelRow() {
                return ((razdelRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new razdelRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(razdelRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.razdelRowChanged != null)) {
                    this.razdelRowChanged(this, new razdelRowChangeEvent(((razdelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.razdelRowChanging != null)) {
                    this.razdelRowChanging(this, new razdelRowChangeEvent(((razdelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.razdelRowDeleted != null)) {
                    this.razdelRowDeleted(this, new razdelRowChangeEvent(((razdelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.razdelRowDeleting != null)) {
                    this.razdelRowDeleting(this, new razdelRowChangeEvent(((razdelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverazdelRow(razdelRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds ds = new ds();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "razdelDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class temaDataTable : global::System.Data.TypedTableBase<temaRow> {
            
            private global::System.Data.DataColumn columnidT;
            
            private global::System.Data.DataColumn columnidR;
            
            private global::System.Data.DataColumn columntext;
            
            private global::System.Data.DataColumn columnurOsvoen;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public temaDataTable() {
                this.TableName = "tema";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal temaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected temaDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idTColumn {
                get {
                    return this.columnidT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idRColumn {
                get {
                    return this.columnidR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn textColumn {
                get {
                    return this.columntext;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn urOsvoenColumn {
                get {
                    return this.columnurOsvoen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public temaRow this[int index] {
                get {
                    return ((temaRow)(this.Rows[index]));
                }
            }
            
            public event temaRowChangeEventHandler temaRowChanging;
            
            public event temaRowChangeEventHandler temaRowChanged;
            
            public event temaRowChangeEventHandler temaRowDeleting;
            
            public event temaRowChangeEventHandler temaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtemaRow(temaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public temaRow AddtemaRow(int idT, razdelRow parentrazdelRowByFK_razdel_tema, string text, string urOsvoen) {
                temaRow rowtemaRow = ((temaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        idT,
                        null,
                        text,
                        urOsvoen};
                if ((parentrazdelRowByFK_razdel_tema != null)) {
                    columnValuesArray[1] = parentrazdelRowByFK_razdel_tema[0];
                }
                rowtemaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtemaRow);
                return rowtemaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public temaRow FindByidTidR(int idT, int idR) {
                return ((temaRow)(this.Rows.Find(new object[] {
                            idT,
                            idR})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                temaDataTable cln = ((temaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new temaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidT = base.Columns["idT"];
                this.columnidR = base.Columns["idR"];
                this.columntext = base.Columns["text"];
                this.columnurOsvoen = base.Columns["urOsvoen"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidT = new global::System.Data.DataColumn("idT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidT);
                this.columnidR = new global::System.Data.DataColumn("idR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidR);
                this.columntext = new global::System.Data.DataColumn("text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntext);
                this.columnurOsvoen = new global::System.Data.DataColumn("urOsvoen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnurOsvoen);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("prt", new global::System.Data.DataColumn[] {
                                this.columnidT,
                                this.columnidR}, true));
                this.columnidT.AllowDBNull = false;
                this.columnidR.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public temaRow NewtemaRow() {
                return ((temaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new temaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(temaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.temaRowChanged != null)) {
                    this.temaRowChanged(this, new temaRowChangeEvent(((temaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.temaRowChanging != null)) {
                    this.temaRowChanging(this, new temaRowChangeEvent(((temaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.temaRowDeleted != null)) {
                    this.temaRowDeleted(this, new temaRowChangeEvent(((temaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.temaRowDeleting != null)) {
                    this.temaRowDeleting(this, new temaRowChangeEvent(((temaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetemaRow(temaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds ds = new ds();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "temaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sodDataTable : global::System.Data.TypedTableBase<sodRow> {
            
            private global::System.Data.DataColumn columnidS;
            
            private global::System.Data.DataColumn columnidT;
            
            private global::System.Data.DataColumn columnidR;
            
            private global::System.Data.DataColumn columnidV;
            
            private global::System.Data.DataColumn columntext;
            
            private global::System.Data.DataColumn columnaud;
            
            private global::System.Data.DataColumn columnsam;
            
            private global::System.Data.DataColumn columntextSam;
            
            private global::System.Data.DataColumn columnsamDop;
            
            private global::System.Data.DataColumn columnnaglPosobie;
            
            private global::System.Data.DataColumn columnzadanie;
            
            private global::System.Data.DataColumn columnymet;
            
            private global::System.Data.DataColumn columnznat;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sodDataTable() {
                this.TableName = "sod";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sodDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sodDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idSColumn {
                get {
                    return this.columnidS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idTColumn {
                get {
                    return this.columnidT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idRColumn {
                get {
                    return this.columnidR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idVColumn {
                get {
                    return this.columnidV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn textColumn {
                get {
                    return this.columntext;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn audColumn {
                get {
                    return this.columnaud;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn samColumn {
                get {
                    return this.columnsam;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn textSamColumn {
                get {
                    return this.columntextSam;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn samDopColumn {
                get {
                    return this.columnsamDop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn naglPosobieColumn {
                get {
                    return this.columnnaglPosobie;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zadanieColumn {
                get {
                    return this.columnzadanie;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ymetColumn {
                get {
                    return this.columnymet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn znatColumn {
                get {
                    return this.columnznat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sodRow this[int index] {
                get {
                    return ((sodRow)(this.Rows[index]));
                }
            }
            
            public event sodRowChangeEventHandler sodRowChanging;
            
            public event sodRowChangeEventHandler sodRowChanged;
            
            public event sodRowChangeEventHandler sodRowDeleting;
            
            public event sodRowChangeEventHandler sodRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsodRow(sodRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sodRow AddsodRow(int idS, int idT, int idR, vidRow parentvidRowByFK_tip_sod, string text, float aud, float sam, string textSam, float samDop, string naglPosobie, string zadanie, string ymet, string znat) {
                sodRow rowsodRow = ((sodRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        idS,
                        idT,
                        idR,
                        null,
                        text,
                        aud,
                        sam,
                        textSam,
                        samDop,
                        naglPosobie,
                        zadanie,
                        ymet,
                        znat};
                if ((parentvidRowByFK_tip_sod != null)) {
                    columnValuesArray[3] = parentvidRowByFK_tip_sod[0];
                }
                rowsodRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsodRow);
                return rowsodRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sodRow FindByidSidTidRidV(int idS, int idT, int idR, int idV) {
                return ((sodRow)(this.Rows.Find(new object[] {
                            idS,
                            idT,
                            idR,
                            idV})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                sodDataTable cln = ((sodDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new sodDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidS = base.Columns["idS"];
                this.columnidT = base.Columns["idT"];
                this.columnidR = base.Columns["idR"];
                this.columnidV = base.Columns["idV"];
                this.columntext = base.Columns["text"];
                this.columnaud = base.Columns["aud"];
                this.columnsam = base.Columns["sam"];
                this.columntextSam = base.Columns["textSam"];
                this.columnsamDop = base.Columns["samDop"];
                this.columnnaglPosobie = base.Columns["naglPosobie"];
                this.columnzadanie = base.Columns["zadanie"];
                this.columnymet = base.Columns["ymet"];
                this.columnznat = base.Columns["znat"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidS = new global::System.Data.DataColumn("idS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidS);
                this.columnidT = new global::System.Data.DataColumn("idT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidT);
                this.columnidR = new global::System.Data.DataColumn("idR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidR);
                this.columnidV = new global::System.Data.DataColumn("idV", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidV);
                this.columntext = new global::System.Data.DataColumn("text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntext);
                this.columnaud = new global::System.Data.DataColumn("aud", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaud);
                this.columnsam = new global::System.Data.DataColumn("sam", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsam);
                this.columntextSam = new global::System.Data.DataColumn("textSam", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntextSam);
                this.columnsamDop = new global::System.Data.DataColumn("samDop", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsamDop);
                this.columnnaglPosobie = new global::System.Data.DataColumn("naglPosobie", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnaglPosobie);
                this.columnzadanie = new global::System.Data.DataColumn("zadanie", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzadanie);
                this.columnymet = new global::System.Data.DataColumn("ymet", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnymet);
                this.columnznat = new global::System.Data.DataColumn("znat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnznat);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnidS,
                                this.columnidT,
                                this.columnidR,
                                this.columnidV}, true));
                this.columnidS.AllowDBNull = false;
                this.columnidT.AllowDBNull = false;
                this.columnidR.AllowDBNull = false;
                this.columnidV.AllowDBNull = false;
                this.columnaud.DefaultValue = ((float)(2F));
                this.columnsam.DefaultValue = ((float)(0F));
                this.columnsamDop.DefaultValue = ((float)(0F));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sodRow NewsodRow() {
                return ((sodRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new sodRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(sodRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sodRowChanged != null)) {
                    this.sodRowChanged(this, new sodRowChangeEvent(((sodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sodRowChanging != null)) {
                    this.sodRowChanging(this, new sodRowChangeEvent(((sodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sodRowDeleted != null)) {
                    this.sodRowDeleted(this, new sodRowChangeEvent(((sodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sodRowDeleting != null)) {
                    this.sodRowDeleting(this, new sodRowChangeEvent(((sodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesodRow(sodRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds ds = new ds();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sodDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class vidDataTable : global::System.Data.TypedTableBase<vidRow> {
            
            private global::System.Data.DataColumn columnidV;
            
            private global::System.Data.DataColumn columntext;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vidDataTable() {
                this.TableName = "vid";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal vidDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected vidDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idVColumn {
                get {
                    return this.columnidV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn textColumn {
                get {
                    return this.columntext;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vidRow this[int index] {
                get {
                    return ((vidRow)(this.Rows[index]));
                }
            }
            
            public event vidRowChangeEventHandler vidRowChanging;
            
            public event vidRowChangeEventHandler vidRowChanged;
            
            public event vidRowChangeEventHandler vidRowDeleting;
            
            public event vidRowChangeEventHandler vidRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddvidRow(vidRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vidRow AddvidRow(int idV, string text) {
                vidRow rowvidRow = ((vidRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        idV,
                        text};
                rowvidRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowvidRow);
                return rowvidRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                vidDataTable cln = ((vidDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new vidDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidV = base.Columns["idV"];
                this.columntext = base.Columns["text"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidV = new global::System.Data.DataColumn("idV", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidV);
                this.columntext = new global::System.Data.DataColumn("text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntext);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnidV}, false));
                this.columnidV.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vidRow NewvidRow() {
                return ((vidRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new vidRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(vidRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.vidRowChanged != null)) {
                    this.vidRowChanged(this, new vidRowChangeEvent(((vidRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.vidRowChanging != null)) {
                    this.vidRowChanging(this, new vidRowChangeEvent(((vidRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.vidRowDeleted != null)) {
                    this.vidRowDeleted(this, new vidRowChangeEvent(((vidRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.vidRowDeleting != null)) {
                    this.vidRowDeleting(this, new vidRowChangeEvent(((vidRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovevidRow(vidRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds ds = new ds();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "vidDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class razdelRow : global::System.Data.DataRow {
            
            private razdelDataTable tablerazdel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal razdelRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerazdel = ((razdelDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idR {
                get {
                    return ((int)(this[this.tablerazdel.idRColumn]));
                }
                set {
                    this[this.tablerazdel.idRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string text {
                get {
                    try {
                        return ((string)(this[this.tablerazdel.textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'text\' in table \'razdel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerazdel.textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstextNull() {
                return this.IsNull(this.tablerazdel.textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettextNull() {
                this[this.tablerazdel.textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public temaRow[] GettemaRows() {
                if ((this.Table.ChildRelations["FK_razdel_tema"] == null)) {
                    return new temaRow[0];
                }
                else {
                    return ((temaRow[])(base.GetChildRows(this.Table.ChildRelations["FK_razdel_tema"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class temaRow : global::System.Data.DataRow {
            
            private temaDataTable tabletema;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal temaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletema = ((temaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idT {
                get {
                    return ((int)(this[this.tabletema.idTColumn]));
                }
                set {
                    this[this.tabletema.idTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idR {
                get {
                    return ((int)(this[this.tabletema.idRColumn]));
                }
                set {
                    this[this.tabletema.idRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string text {
                get {
                    try {
                        return ((string)(this[this.tabletema.textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'text\' in table \'tema\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletema.textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string urOsvoen {
                get {
                    try {
                        return ((string)(this[this.tabletema.urOsvoenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'urOsvoen\' in table \'tema\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletema.urOsvoenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public razdelRow razdelRow {
                get {
                    return ((razdelRow)(this.GetParentRow(this.Table.ParentRelations["FK_razdel_tema"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_razdel_tema"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstextNull() {
                return this.IsNull(this.tabletema.textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettextNull() {
                this[this.tabletema.textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsurOsvoenNull() {
                return this.IsNull(this.tabletema.urOsvoenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeturOsvoenNull() {
                this[this.tabletema.urOsvoenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sodRow[] GetsodRows() {
                if ((this.Table.ChildRelations["FK_tema_sod"] == null)) {
                    return new sodRow[0];
                }
                else {
                    return ((sodRow[])(base.GetChildRows(this.Table.ChildRelations["FK_tema_sod"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sodRow : global::System.Data.DataRow {
            
            private sodDataTable tablesod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sodRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesod = ((sodDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idS {
                get {
                    return ((int)(this[this.tablesod.idSColumn]));
                }
                set {
                    this[this.tablesod.idSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idT {
                get {
                    return ((int)(this[this.tablesod.idTColumn]));
                }
                set {
                    this[this.tablesod.idTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idR {
                get {
                    return ((int)(this[this.tablesod.idRColumn]));
                }
                set {
                    this[this.tablesod.idRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idV {
                get {
                    return ((int)(this[this.tablesod.idVColumn]));
                }
                set {
                    this[this.tablesod.idVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string text {
                get {
                    try {
                        return ((string)(this[this.tablesod.textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'text\' in table \'sod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesod.textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float aud {
                get {
                    try {
                        return ((float)(this[this.tablesod.audColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'aud\' in table \'sod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesod.audColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float sam {
                get {
                    try {
                        return ((float)(this[this.tablesod.samColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sam\' in table \'sod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesod.samColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string textSam {
                get {
                    try {
                        return ((string)(this[this.tablesod.textSamColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'textSam\' in table \'sod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesod.textSamColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float samDop {
                get {
                    try {
                        return ((float)(this[this.tablesod.samDopColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'samDop\' in table \'sod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesod.samDopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string naglPosobie {
                get {
                    try {
                        return ((string)(this[this.tablesod.naglPosobieColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'naglPosobie\' in table \'sod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesod.naglPosobieColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string zadanie {
                get {
                    try {
                        return ((string)(this[this.tablesod.zadanieColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'zadanie\' in table \'sod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesod.zadanieColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ymet {
                get {
                    try {
                        return ((string)(this[this.tablesod.ymetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ymet\' in table \'sod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesod.ymetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string znat {
                get {
                    try {
                        return ((string)(this[this.tablesod.znatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'znat\' in table \'sod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesod.znatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vidRow vidRow {
                get {
                    return ((vidRow)(this.GetParentRow(this.Table.ParentRelations["FK_tip_sod"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_tip_sod"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public temaRow temaRowParent {
                get {
                    return ((temaRow)(this.GetParentRow(this.Table.ParentRelations["FK_tema_sod"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_tema_sod"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstextNull() {
                return this.IsNull(this.tablesod.textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettextNull() {
                this[this.tablesod.textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaudNull() {
                return this.IsNull(this.tablesod.audColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaudNull() {
                this[this.tablesod.audColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssamNull() {
                return this.IsNull(this.tablesod.samColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsamNull() {
                this[this.tablesod.samColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstextSamNull() {
                return this.IsNull(this.tablesod.textSamColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettextSamNull() {
                this[this.tablesod.textSamColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssamDopNull() {
                return this.IsNull(this.tablesod.samDopColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsamDopNull() {
                this[this.tablesod.samDopColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnaglPosobieNull() {
                return this.IsNull(this.tablesod.naglPosobieColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnaglPosobieNull() {
                this[this.tablesod.naglPosobieColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IszadanieNull() {
                return this.IsNull(this.tablesod.zadanieColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetzadanieNull() {
                this[this.tablesod.zadanieColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsymetNull() {
                return this.IsNull(this.tablesod.ymetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetymetNull() {
                this[this.tablesod.ymetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsznatNull() {
                return this.IsNull(this.tablesod.znatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetznatNull() {
                this[this.tablesod.znatColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class vidRow : global::System.Data.DataRow {
            
            private vidDataTable tablevid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal vidRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablevid = ((vidDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idV {
                get {
                    try {
                        return ((int)(this[this.tablevid.idVColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'idV\' in table \'vid\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevid.idVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string text {
                get {
                    try {
                        return ((string)(this[this.tablevid.textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'text\' in table \'vid\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevid.textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidVNull() {
                return this.IsNull(this.tablevid.idVColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidVNull() {
                this[this.tablevid.idVColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstextNull() {
                return this.IsNull(this.tablevid.textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettextNull() {
                this[this.tablevid.textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sodRow[] GetsodRows() {
                if ((this.Table.ChildRelations["FK_tip_sod"] == null)) {
                    return new sodRow[0];
                }
                else {
                    return ((sodRow[])(base.GetChildRows(this.Table.ChildRelations["FK_tip_sod"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class razdelRowChangeEvent : global::System.EventArgs {
            
            private razdelRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public razdelRowChangeEvent(razdelRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public razdelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class temaRowChangeEvent : global::System.EventArgs {
            
            private temaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public temaRowChangeEvent(temaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public temaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sodRowChangeEvent : global::System.EventArgs {
            
            private sodRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sodRowChangeEvent(sodRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sodRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class vidRowChangeEvent : global::System.EventArgs {
            
            private vidRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vidRowChangeEvent(vidRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vidRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591